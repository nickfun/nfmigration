#+TITLE: PHP Database Migration System
#+AUTHOR: Nick F
#+DATE: 2014-04-26

* Database Migration 

There are some existing DB Migration tools, but I need something that can handle connection
to multiple databases. Also, the details on how to connect, and how many connections will be 
made, will be in another database.

* Goals
** Overview
I've used the Laravel migration system a little, my hope is to recreate the major features
of that system.

- CLI interface
- generate migration classes with `up` and `down` methods
- list of databases with credentails stored outside of code
- databases can depend on other databases to supply the details
  - ex: run migrations on a SYSTEM database. the SYSTEM database has a DB table with a list
    of databases that we also need to connect to and run more migrations on
- allow going up and down to any migration point

At work we have several databases, one of which scales out. Our system is like this:

- "system", hold general application config
- "head", holds information about all our customers
- "body", holds customer data for one or more customers
  there are many "body" databases

The "head" database has a "body_dbs" table with connection information to all the "body" databases.
Ideally, the NFMigration system can be setup so that a "body" migration will gather connection
info from "head" and run a migration on _each_ "body" database. 

** config

Setting up the config for something like this will be tricky. Normal connections will just need to 
supply database information as strings. But a dependant connection will need to supply some code
that accepts a PDO connection and builds many new PDO connections to be given to the migrations.
I will need to set this up carefully.

* Ideal usage

Using names from above...
#+BEGIN_EXAMPLE
$ php nfmigrate.php add system update-user-table
#+END_EXAMPLE

The above command would create a new migration called "update-user-table" to be run against the system database.
It would create a file called `/system/20140426_update-user-table.php` that contains a PHP class with an
`up` and `down` methods to make and unmake the needed changes. Each method will be passed a PDO object.

#+BEGIN_EXAMPLE
$ php nfmigrate.php add body add-reports-role
#+END_EXAMPLE

The above command would create a similar file, however it will be called several times and each time it is
passed a PDO object for a different "body" database.

I'm also thinking a status or check system could be used, just to verify that your connections will work as
expected. So every System will have a `checkConnection()` class that tries to do a connection and run a simple 
`select 1;` query to ensure that the whole thing works. Example:

#+BEGIN_EXAMPLE
$ php nfmigrate.php check
#+END_EXAMPLE

And it would go through every System and confirm that the connection can be made and the dummy query
runs and returns data.

* Migration table schema

Laravel migrations only have =migration= and =batch=. All I would need is =name= and =batch=. Each system has it's own table, I don't need to 
store =system= info.

** Name

Just the name of the migration. When looking at existing migrations, if the name already exists in the database
then I know I should not run that migration.

** Batch

Batch can be used for a rollback command. When I run a migration, the flow could be:
1. find all migrations that have not been run
2. find the MAX(batch), add 1 and set that to NEWBATCH
3. run the migrations, insert their names, set their batch value to NEWBATCH

A rollback command would use the Batch field to determine which migrations were last run. 
I could also use it to rollback the last X batches.

The NEWBATCH value would be different for different systems. That shouldn't bee too tricky to manage, but it's 
something to keep in mind.
* Naming Schema
** Overview

Everything will live in the =/system= folder.

#+BEGIN_EXAMPLE

systems
├── alpha
│   ├── 20140603_224733_create-admin.php
│   └── 20140603_224738_backfill-data.php
├── alpha.php
├── test1
│   ├── 20140603_224635_create-users.php
│   └── 20140603_224647_setup-indexes.php
└── test1.php

#+END_EXAMPLE

** System
- A System is a collection of Migrations.
- A System corresponds to One database, or a set of many databases that serve the same purpose
- Systems will provide a =getConnection= and =check= function

** Migration
- A Migration is a SQL script
- It can be executed with =up= and undone with `down`
- up/down are boolean functions
- when =up= fails, =down= will be called and the user notified
- when =down= fails, all we can do is notify the user
- Name: <timestamp>_<name>.php
  - Advantage: filename sort!
  - Disadvantage: PHP Classnames can not start with a number!
** TODO Decide on file & class names
- php classes can not start with a number
- I want the filenames to be easily sortable by creation
- options?

